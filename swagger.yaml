openapi: 3.0.3
info:
  title: Simple Online Store API
  description: API for a simple online store with limited inventory.
  version: 1.0.0
servers:
  - url: https://example.com/api
tags:
  - name: store
    description: Operations related to the store
  - name: user
    description: Operations related to users
  - name: order
    description: Operations related to orders
  - name: product
    description: Operations related to products
paths:
  /store/inventory:
    get:
      tags:
        - store
      summary: Get inventory status
      description: Returns the available quantity of each item in the inventory.
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
  /store/order:
    post:
      tags:
        - order
      summary: Create order
      description: Place a new order for a specified item.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: integer
                productId:
                  type: integer
                quantity:
                  type: integer
                  format: int32
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  orderId:
                    type: integer
                    format: int64
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      tags:
        - order
      summary: Get all orders
      description: Returns a list of all orders.
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
  /store/order/{orderId}:
    get:
      tags:
        - order
      summary: Get order by ID
      description: Returns detailed information about a specific order.
      parameters:
        - name: orderId
          in: path
          required: true
          description: ID of the order to retrieve
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Order not found
    delete:
      tags:
        - order
      summary: Delete order by ID
      description: Cancels a specific order and restores the item to the inventory.
      parameters:
        - name: orderId
          in: path
          required: true
          description: ID of the order to delete
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
        '404':
          description: Order not found
  /user/{userId}:  # Fixed path to include {userId} segment
    post:
      tags:
        - user
      summary: Create user
      description: Creates a new user.
      parameters:  # Move the path parameter to the operation level
        - name: userId
          in: path
          required: true
          description: ID of the user to create
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  userId:
                    type: integer
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      tags:
        - user
      summary: Get user by ID
      description: Returns information about a specific user.
      parameters:
        - name: userId
          in: path
          required: true
          description: ID of the user to retrieve
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: User not authenticated
    put:
      tags:
        - user
      summary: Update user by ID
      description: Updates information about a specific user.
      parameters:
        - name: userId
          in: path
          required: true
          description: ID of the user to update
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        '200':
          description: Successful operation
        '401':
          description: The change was not executed
    delete:
      tags:
        - user
      summary: Delete user by ID
      description: Deletes a specific user.
      parameters:
        - name: userId
          in: path
          required: true
          description: ID of the user to delete
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
        '500':
          description: User not found
  /product:
    get:
      tags:
        - product
      summary: Get all products
      description: Returns information about all products.
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
  /product/{productId}:
    get:
      tags:
        - product
      summary: Get product by ID
      description: Returns information about a specific product.
      parameters:
        - name: productId
          in: path
          required: true
          description: ID of the product to retrieve
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found
components:
  schemas:
    Order:
      type: object
      properties:
        orderId:
          type: integer
          format: int64
        userId:
          type: integer
        productId:
          type: integer
        status:
          type: string

    UserCreate:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 6
          maxLength: 20
          pattern: "^[a-zA-Z0-9]+$"

    User:
      type: object
      properties:
        userId:
          type: integer
        username:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 6
          maxLength: 20
          pattern: "^[a-zA-Z0-9]+$"

    UserUpdate:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 6
          maxLength: 20
          pattern: "^[a-zA-Z0-9]+$"

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
        message:
          type: string

    Product:
      type: object
      properties:
        productId:
          type: integer
        productName:
          type: string
        price:
          type: number
        quantityAvailable:
          type: integer
